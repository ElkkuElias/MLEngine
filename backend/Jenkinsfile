pipeline {
    agent any
    environment {
        // Define Docker Hub credentials ID
        DOCKERHUB_CREDENTIALS_ID = 'elkkuelias'
        // Define Docker Hub repository name
        DOCKERHUB_REPO = 'elkkuelias/mlengine'
        // Define Docker image tag
        DOCKER_IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ElkkuElias/MLEngine.git'
            }
        }

        stage('Setup') {
            steps {
                dir('backend') {
                    bat 'python -m venv .venv'
                    bat '.venv\\Scripts\\activate'
                    bat 'pip install -r requirements.txt'
                }
            }
        }

        stage('Test') {
            steps {
                dir('backend') {
                    bat 'call .venv\\Scripts\\activate'
                    // Run tests with coverage
                    bat 'coverage run testRunner.py'
                    // Generate coverage reports
                    bat 'coverage html -d coverage_html'
                    bat 'coverage xml -o coverage.xml'
                }
            }
        }

       // stage('Build Docker Image') {
          //  steps {
                //dir('backend') {
                  //  script {
                        // Logging in to Docker Hub
                    //    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS_ID) {
                            // Build Docker image
                      //      def customImage = docker.build("${DOCKERHUB_REPO}:${DOCKER_IMAGE_TAG}")
                            // Push Docker image to Docker Hub
                        //    customImage.push()
                        //}
                    //}
               // }
            //}
        //}
    }

    post {
        always {
           dir('backend') {
                // Archive JUnit test reports
                junit 'test-reports/*.xml'
                // Publish the generated HTML coverage report
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'coverage_html',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
            }
        }
    }
}
